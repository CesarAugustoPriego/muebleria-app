{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cesar\\\\OneDrive\\\\Documentos\\\\GitHub\\\\muebleria-app\\\\frontend\\\\src\\\\pages\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/pages/LoginPage.jsx\nimport React, { useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Login from '../components/Auth/Login';\nimport { AuthContext } from '../contexts/AuthContext';\nimport { CartContext } from '../contexts/CartContext';\nimport { PurchaseContext } from '../contexts/PurchaseContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const navigate = useNavigate();\n  const [error, setError] = useState('');\n  const {\n    login\n  } = useContext(AuthContext);\n  const {\n    clearCart\n  } = useContext(CartContext);\n  const {\n    clearPurchases\n  } = useContext(PurchaseContext);\n  const handleLogin = async e => {\n    e.preventDefault();\n    const form = e.target;\n    const usuario = form.usuario.value;\n    const password = form.password.value;\n\n    // Validación mínima\n    if (!usuario || !password) {\n      setError('Faltan campos');\n      return;\n    }\n    try {\n      const res = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Envía user y password tal como lo lee tu authController\n        body: JSON.stringify({\n          user: usuario,\n          password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) {\n        setError(data.msg || 'Credenciales inválidas');\n        return;\n      }\n\n      // 1) Actualiza el contexto de autenticación\n      login(data.token, {\n        rol: data.rol,\n        nombres: data.nombres\n      });\n\n      // 2) Limpia carrito y compras de sesiones anteriores\n      clearCart();\n      clearPurchases();\n\n      // 3) Redirige según rol\n      if (data.rol === 'admin') {\n        navigate('/admin/dashboard');\n      } else {\n        navigate('/');\n      }\n    } catch (err) {\n      console.error(err);\n      setError('Error de conexión con el servidor');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Login, {\n      onSubmit: handleLogin,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        textAlign: 'center',\n        marginTop: '1rem'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(LoginPage, \"RXxOAUAJS64Oc/Xz7fkfAY7tFAM=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useContext","useNavigate","Login","AuthContext","CartContext","PurchaseContext","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginPage","_s","navigate","error","setError","login","clearCart","clearPurchases","handleLogin","e","preventDefault","form","target","usuario","value","password","res","fetch","method","headers","body","JSON","stringify","user","data","json","ok","msg","token","rol","nombres","err","console","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","style","color","textAlign","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/cesar/OneDrive/Documentos/GitHub/muebleria-app/frontend/src/pages/LoginPage.jsx"],"sourcesContent":["// frontend/src/pages/LoginPage.jsx\r\nimport React, { useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Login from '../components/Auth/Login';\r\n\r\nimport { AuthContext }     from '../contexts/AuthContext';\r\nimport { CartContext }     from '../contexts/CartContext';\r\nimport { PurchaseContext } from '../contexts/PurchaseContext';\r\n\r\nexport default function LoginPage() {\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState('');\r\n\r\n  const { login }           = useContext(AuthContext);\r\n  const { clearCart }       = useContext(CartContext);\r\n  const { clearPurchases }  = useContext(PurchaseContext);\r\n\r\n  const handleLogin = async e => {\r\n    e.preventDefault();\r\n    const form     = e.target;\r\n    const usuario  = form.usuario.value;\r\n    const password = form.password.value;\r\n\r\n    // Validación mínima\r\n    if (!usuario || !password) {\r\n      setError('Faltan campos');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        // Envía user y password tal como lo lee tu authController\r\n        body: JSON.stringify({ user: usuario, password })\r\n      });\r\n\r\n      const data = await res.json();\r\n      if (!res.ok) {\r\n        setError(data.msg || 'Credenciales inválidas');\r\n        return;\r\n      }\r\n\r\n      // 1) Actualiza el contexto de autenticación\r\n      login(data.token, { rol: data.rol, nombres: data.nombres });\r\n\r\n      // 2) Limpia carrito y compras de sesiones anteriores\r\n      clearCart();\r\n      clearPurchases();\r\n\r\n      // 3) Redirige según rol\r\n      if (data.rol === 'admin') {\r\n        navigate('/admin/dashboard');\r\n      } else {\r\n        navigate('/');\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      setError('Error de conexión con el servidor');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Login onSubmit={handleLogin} error={error} />\r\n      {error && (\r\n        <div style={{ color: 'red', textAlign: 'center', marginTop: '1rem' }}>\r\n          {error}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}